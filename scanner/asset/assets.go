// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  tls-parameters-4.csv
//  git-version

package asset

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"tls-parameters-4.csv": &asset{
		name: "tls-parameters-4.csv",
		data: "" +
			"\xb4\x9c\x5d\x6f\xdb\x3a\xd2\xc7\xef\x0b\x3c\xdf\xc1\xc8\xc5\x73\xb1\x90\x0a\x51\x22\x29\x0a\x58" +
			"\x2c\x20\x51\x52\x13\xe4\x15\xb6\x7b\xce\x66\x0f\x0a\xc3\x48\xd4\xd6\xd8\xc4\x2e\x62\x9f\x74\xfb" +
			"\xed\x17\x7e\x49\x42\xd1\x33\xc3\x51\x16\xe7\x5c\x14\xa7\x48\x7f\x33\xff\x19\x4a\x33\x24\x45\xe6" +
			"\xb7\xf9\xc3\x9f\x5d\x54\x77\xeb\xbb\xa7\xc5\x8f\xcd\x62\xb5\x8c\xea\xe9\xc5\x24\xbe\x3e\x8f\xc6" +
			"\xdd\xdd\xea\xf1\xb1\x5b\xde\x77\xf7\xd1\xb8\xfb\xda\x3d\x75\xcb\xbb\xee\xff\x3e\x9c\x24\xff\x49" +
			"\x92\x68\xfb\xc7\x49\x34\xbd\x98\xcc\xae\x3e\x5f\x5c\xcc\x7e\x3f\x9b\x9e\xee\xff\x6f\xfb\x47\x74" +
			"\x1b\x5d\x45\x7f\x8c\x5b\xab\x52\xa9\xbf\x38\x88\xd8\x23\xe3\x49\xe9\x10\x97\xb5\x42\x81\x14\x02" +
			"\x26\xa7\x25\x0a\x64\x6f\x40\xf3\xcf\x9b\xeb\xf1\x74\xcf\x8d\xad\x9c\xc9\x64\xe7\xea\xea\x40\xca" +
			"\x4c\xea\x2f\xdb\xff\xd1\x99\xcc\x5d\x13\xd2\xf3\xb9\x65\x45\x6a\x7a\xf0\xce\x2d\x04\x2b\x04\xde" +
			"\x6a\x0e\xc2\x1a\x13\x9f\xce\x6c\x65\x5f\x02\xb8\x75\x03\x70\xe8\xdc\x73\x7d\x56\x37\xe5\x8e\xeb" +
			"\xe5\x4b\xea\xc2\x85\x0c\xec\xb2\x6e\x26\x32\x39\x82\x7d\x8f\x85\xe7\xb1\x6e\x26\x41\x87\xa5\xc7" +
			"\x64\x5b\xa8\xa9\x9b\x63\xd0\x1b\xd9\x6a\x0f\xd6\xa7\xb3\x7a\x32\x79\x87\x58\xdb\xe3\xd9\x7a\xeb" +
			"\x63\x8c\x2d\xb9\x79\x65\xdf\x97\xdf\xb6\xc7\x73\x25\x8b\xe4\x18\xe3\x4a\x16\xe2\x85\x6d\xde\x97" +
			"\x66\x91\xf6\x0d\xb0\x45\x67\x00\xc7\x56\x2d\xdf\xe0\x77\x65\x5a\xa8\xbe\x01\xb6\x6a\x0d\x70\x6c" +
			"\xd5\xf9\xeb\x38\xcd\x97\xab\xe5\x7b\xeb\x95\x30\x7d\x33\x83\x6b\x96\x28\x70\x1d\xbc\xec\x95\x80" +
			"\x02\x4e\xf6\x2a\x80\x63\x67\xcf\xc6\xa2\x3e\x89\xc6\xdd\xba\x7b\x7a\xee\xee\x47\x9b\xd5\x68\xfe" +
			"\xbc\x5a\xdc\x8f\xee\x56\xcb\xaf\x0f\x8b\xbb\xcd\x7a\xf4\x73\xb1\xf9\x3e\x9a\x4c\x2e\x9e\xb3\x28" +
			"\x02\x4d\x1c\xde\xcf\xf3\x71\xa5\x70\xd1\x69\x2e\x52\x17\x6a\x7d\x08\x55\xec\x91\x69\xe2\x93\x50" +
			"\x73\xd8\x41\xc0\x28\xa5\xc2\xa7\xc1\xfa\xee\xfb\x4c\xb1\x10\xdd\x4e\xe2\x43\x19\x19\x22\x45\x4a" +
			"\x2c\x44\xf7\x41\x44\x43\x54\x68\x88\x94\x4f\xed\x50\xde\xb3\xfb\xd2\x36\xa9\x0c\xe5\x08\xee\x74" +
			"\x5d\x0a\x37\x28\x2e\x5f\xd0\x60\xdc\x45\x38\x02\x2a\x01\x65\x38\x02\x0a\xaf\xe8\x08\x58\x23\x77" +
			"\x68\xae\x37\x93\x73\x64\x9e\x26\x73\xa3\x5c\xa0\x7e\x2b\x9c\x7c\xa8\x79\x9b\x3b\xf0\xa1\xd6\x9b" +
			"\x70\x94\xcd\x64\xf7\x44\x06\xea\x4b\x96\x1c\x37\x7e\x2e\x2a\x8e\x1b\x30\x17\x85\xda\x27\x97\xcd" +
			"\x80\x66\xc4\x65\x25\x50\x8a\xb9\xac\x02\x32\x9c\x2a\x1d\xe4\x34\x9c\x61\x0e\x9a\xc3\x19\xe6\xa0" +
			"\x06\xc9\x30\x87\x2d\x90\x0c\x73\xd8\x12\xc9\x30\x87\xad\x90\x65\x50\xaa\x34\xca\x58\xfa\xb9\xa7" +
			"\xd0\x9a\x1e\x50\x0a\x6d\x82\x6f\x0d\x45\xb7\xc1\x17\x87\xa0\x65\x12\x7e\x77\x28\xdc\x5f\x9c\xda" +
			"\xf2\xb2\xb9\xb8\x38\x2b\xe1\x77\xa0\xc8\xdc\x22\x2a\xd3\xe3\xb8\x07\xf1\xd9\x71\xe4\x83\x78\x09" +
			"\xc4\x3e\xc8\x00\x34\x03\x1e\x64\x40\x03\xcf\xf7\x20\x03\x79\x2c\xdb\x93\xe8\x24\x38\xa3\x7b\xf9" +
			"\xef\xc3\x7d\xf7\xe3\x61\xf5\xab\xbb\x1f\x2d\x1e\x7f\x3c\x74\x8f\xdd\x72\x33\xdf\x2c\x56\xcb\xf5" +
			"\xc9\x76\xba\x77\x33\x5f\x2f\x66\xcd\xd3\x6a\xd9\x2d\x1d\x27\x2a\x89\x95\x21\x67\x8d\x51\x14\x9d" +
			"\xec\xe0\xd1\x1e\x8e\x46\x7f\xff\x31\x5f\x2f\x3e\x76\xbb\xbf\xfd\xff\x72\xf5\xef\xc5\xfc\xe3\xdd" +
			"\xea\xf1\x1f\xd1\x28\x4d\x12\x13\x27\x32\x4e\xe4\xc7\x91\xf3\x97\x2f\x27\x8e\xbf\x22\x56\xf6\x2f" +
			"\x0f\xaa\x8e\x55\x7b\x12\x7d\x5e\xce\xd7\xeb\xc5\xb7\x65\x77\x1f\x45\xd1\xdb\x4f\x75\x12\x6b\xcd" +
			"\x90\xf0\xe1\xe7\xe2\xbe\x7b\xf8\x35\x7a\x87\x00\x9d\x87\x3b\x0f\xf1\xe6\x69\x13\x6c\x04\x14\x5d" +
			"\x04\x7b\x01\x45\x97\xe1\x76\x40\xe1\x55\xb8\x23\x50\xb8\x0d\xb7\x5d\x0a\xaf\xc3\x3d\x85\xc2\x9b" +
			"\xd8\x64\xe8\x73\x63\x24\x56\x0f\xc1\x8e\xd5\x7f\x99\x8d\x22\xea\x21\x87\xd7\x44\x3d\xe4\xf0\x39" +
			"\x55\x0f\x39\x06\x0c\x55\x0f\x39\x06\x0a\xaa\x1e\x72\x0c\x94\xde\x9c\x1a\x5a\x2d\xca\x34\x2f\xa0" +
			"\x09\xb9\xa9\x3c\x18\x5d\xa4\xee\x2c\x38\xa0\x3f\x93\xc7\x26\x81\x3e\x57\x03\x1c\x14\xa5\xcf\x35" +
			"\xc0\x42\x60\x50\xa4\x2d\x60\x80\x1b\x6d\x91\x00\x30\x33\xe2\x42\x20\x2c\x23\xea\x22\x05\x56\x32" +
			"\x43\xa2\x2e\x32\xc0\x00\x3b\x6a\x09\xc0\xdc\xa8\x15\xc2\x72\xa2\xd6\x5e\x45\x99\x34\x4d\x7d\x0c" +
			"\x09\xed\xbe\x06\x45\x7e\x5c\x49\x58\x9c\x39\xae\x20\x2c\xae\x00\x2a\x07\x0b\x2c\x81\x8a\xc1\x02" +
			"\xa1\x6d\x30\x16\x88\x4d\xf1\x3f\xd9\xcb\xe3\xd2\x6f\x8c\x8b\x62\x53\xfc\x03\x9a\x19\x89\xa2\x0d" +
			"\xd1\xec\x7b\x9e\x6f\x41\xbc\x25\x3a\x66\xcf\x3b\x88\x97\x09\xbe\x44\x08\x87\x5d\x0a\x7c\xae\x10" +
			"\x8e\xbc\xa4\x16\xe7\x0c\xe7\x19\x31\xd5\x60\x78\x97\xf8\xd2\x8a\xe1\x5c\xe1\x73\x2c\x86\x6f\x4d" +
			"\xcc\x53\x18\xce\x73\x62\x9e\xc2\xf0\x6e\x90\x9e\x04\x79\x96\xc6\xad\x93\x65\x81\xb4\x25\xc8\xab" +
			"\x87\x96\x44\x6f\x80\x9e\x73\x0f\xaf\x88\xf6\x00\x3d\xe7\x1e\x6e\x89\x1a\xcd\x88\xbb\x26\xca\x34" +
			"\x23\xf6\x86\x9e\x05\x50\x9e\x5b\x7a\x22\x40\x78\xad\x12\x64\x17\x91\x70\x57\x09\x84\xa1\xfc\xa4" +
			"\xe1\xae\x4f\xb9\xcc\xc2\x8d\x9f\xf2\x2e\x89\xad\x4f\xca\xad\x22\x38\xca\x9f\x0e\x77\x7b\xca\x6d" +
			"\x1e\x6e\xf8\x94\x77\x43\xec\xd9\x52\x6e\x0b\x82\xa3\xfc\x95\x8c\x5d\x9c\x9e\xdf\xfe\xac\xbb\xaa" +
			"\x78\x1b\x39\x94\x09\xcb\xdb\xcb\xa1\x4c\xd4\xcc\xed\x1c\xca\x46\xc3\xdc\xd1\xa1\x6c\xb4\xcc\x4d" +
			"\x1d\xc2\x86\x4d\x18\xeb\x48\x8a\x17\xbc\xa5\x24\x65\x22\xe5\xad\x26\x29\x13\x19\x73\x41\x49\xd9" +
			"\x90\xcc\x35\x25\x65\x43\x31\x97\x95\x94\x0d\x1d\xb7\x0d\xba\xee\x6f\x0f\x63\xde\x5c\xde\x4c\x6f" +
			"\x67\xe3\xe6\xaa\xf9\x74\x3d\x3d\x2b\xa7\x67\xd7\x57\xb3\xb3\xab\xf6\x7a\x36\xb1\x93\xdf\xde\x4c" +
			"\xe7\xaf\x5b\x0a\x22\x16\x69\xf4\x37\xc8\xae\xc8\x0e\xe7\x85\xb0\x1f\x1d\x86\x98\xe8\xae\x46\xbe" +
			"\xf8\xd9\x13\xe9\x1b\x81\x34\x54\x9f\x38\x0c\xa0\x3d\x2d\xed\x69\x99\x26\xb3\x9b\xeb\x8b\x5b\x91" +
			"\x25\x2a\xe4\x49\xf6\xb5\xd9\xb0\x36\x75\x4c\x18\x7f\x48\x76\xcc\x1f\x67\xcd\xe4\xd3\xa8\xbc\xdb" +
			"\x2c\x56\xcb\x51\x9a\x08\x13\x27\x26\x16\x3d\x5b\x3a\xde\x8f\x08\x90\x39\x19\x2b\x05\xe7\x5b\x69" +
			"\xe7\x7c\x56\x5b\x5e\x5c\x54\xa5\x3d\xef\x8f\x5b\xae\x92\x43\xd9\xdc\xff\x63\x11\x6f\xdf\x54\x74" +
			"\x98\xac\x7b\x7c\xab\xb1\xf5\xe9\xf6\x0f\xf4\x50\x96\x91\xe9\xe1\x79\xb3\xee\x29\x2e\x9f\x83\x16" +
			"\xbc\x3b\xb4\xbf\xe0\xb5\xee\xc1\x2e\xdf\x06\xba\xe6\xf5\x35\x48\x98\xc7\x96\xbd\x3e\xae\x70\x1c" +
			"\x5a\xf9\xfa\xb8\x7e\xc3\x9b\x41\xa9\xcb\x11\x70\x50\xee\x0c\x62\x84\x9d\xbc\x02\x31\xc0\xcd\x5e" +
			"\x49\xf0\x9c\xf4\x55\x4e\xf6\xc7\xec\xdc\x59\x88\x1a\x94\xb8\x1a\xb2\xc0\xce\x5a\x03\xd1\xdc\x94" +
			"\xb5\x18\xcc\xc8\xd7\xcb\x09\xb0\x7d\xbe\xd9\x09\x13\x02\xc4\x86\x64\x4c\xa4\xa0\x09\x6e\xca\x44" +
			"\x06\xe2\xcc\x9c\x09\x89\xd2\x9c\xa4\xb9\xaf\xf8\x5b\x6f\x0d\x26\x4d\x83\xd8\xa0\xa4\xe5\xa0\x09" +
			"\x76\xd2\x0c\x88\x73\x93\x56\xa0\x34\x27\x69\x87\x37\x7b\x32\xbe\xd9\xfe\xb3\xd0\x11\xae\x44\x49" +
			"\x17\xae\xfa\x30\xe3\x04\x9d\x67\xc0\xf6\x0d\x30\x0e\x0e\x7a\x06\x6a\x40\x3e\x7a\xec\xc1\x63\x1b" +
			"\x44\x3d\x97\x6f\x11\xf1\x4c\xfe\xe5\x38\xd9\x91\x76\xf0\xdb\x82\xc7\x0a\x42\x3b\x87\x4f\x09\xed" +
			"\x1c\x3e\xe3\x35\x14\x6f\x4f\xa9\x70\x4d\x48\x5e\x4f\xf1\xf6\x95\x7a\x26\x14\x6b\x4e\x40\x89\xd0" +
			"\xac\x69\x01\xa5\x21\xe7\x54\x3c\x4a\x82\xe1\x14\x3d\x4a\x41\xc1\x68\x53\x94\x80\x92\xd1\xa9\x28" +
			"\xff\x55\xe0\x59\x80\xf7\x94\x7b\x26\x6c\xe0\x59\x80\xf7\x95\x7b\x26\x6a\xfa\x59\x80\x37\x39\x7b" +
			"\x16\x1a\xfa\x59\x80\xf7\x39\x7b\x16\x5a\xf2\x59\x08\xe7\x21\x4b\xc8\x67\x21\x9c\x85\x4c\x50\xcf" +
			"\x42\x38\x07\x59\x4a\x3d\x0b\xe1\x0c\x64\xbd\xba\x40\x7e\x19\x53\xd2\x14\x50\x33\xcd\x24\x68\x02" +
			"\xef\x08\xb2\xaf\x40\x81\x38\x5a\x93\x3d\x5a\xa3\x34\x58\x15\x3d\x3a\xe7\xf8\xf6\x36\xcd\x7a\x06" +
			"\x0c\xc7\xbd\xb7\x7b\xd6\x33\x50\x80\x06\x8e\x6f\xdd\x78\x58\x49\x62\x94\xe2\x8a\x24\x29\xa9\x47" +
			"\x1f\xbf\xc6\xf8\x96\x94\x4e\x93\x1e\x5b\x43\x2c\x92\x22\x9f\x85\x4e\xb8\x0d\x70\xdd\x22\x38\xcf" +
			"\xbb\x84\x3e\x7f\xf1\xbd\x4b\x81\xe0\x4c\xef\xe0\x07\xb0\x01\xee\x33\x8c\x67\xfa\x87\x36\xd0\x86" +
			"\xf8\x57\x18\xcf\xf4\x0f\x7e\x06\x1b\xe0\x3f\xc7\x78\xa6\x7f\x6c\x21\x3f\x44\x43\x41\xd9\x60\xea" +
			"\x28\x91\x56\x37\x40\x46\x45\x98\x60\xaa\xb0\x70\xb7\x1b\x20\xa2\xc6\x2d\x30\x35\xc0\x6b\xfc\x01" +
			"\x12\x5a\xd4\x00\x4f\x81\x4a\xb0\x3a\x08\xb4\x6b\x9f\x15\x58\x1d\x04\x5a\xb5\xcf\xa6\xd4\xbb\xc8" +
			"\xf0\x9d\x51\xef\x22\xc3\xbf\x24\x2a\x21\xc3\xbd\x22\x2a\x21\xc3\xbb\xa6\x2a\x21\xc3\x7d\x4e\x55" +
			"\x42\x86\x7f\x43\x74\x21\x86\xfb\x82\xe8\x42\x0c\xef\x25\x55\x07\x19\xee\x2b\xaa\x0e\x32\xfc\xdb" +
			"\x50\x1d\x64\x68\xa8\x43\x75\x90\xa1\xa3\x09\xd4\x41\x86\x8c\x36\x50\x07\xc3\x2a\x74\x42\xd7\xc1" +
			"\xb0\x08\x2d\xe8\x3a\xc8\xd0\x90\x92\x75\x90\x21\x21\x23\xeb\x20\x43\x81\xf4\xcf\x1d\xf0\x8b\xb0" +
			"\x56\x10\xcb\xab\xbf\x5a\x43\xa7\x01\x06\xf8\xce\x31\x9e\xe9\x1f\xfa\xc0\x3e\xc4\x7f\x81\xf1\x4c" +
			"\xff\x25\x96\x77\xc6\xa0\x57\x58\xde\x19\xe3\x6d\xa9\xbc\x33\x7c\xd7\x54\xde\x19\xfe\x1b\x2a\xef" +
			"\x0c\xff\x2d\x95\xf7\xb0\xff\x3c\x81\xd7\x7a\xfc\x91\xcf\x05\x6e\x81\x37\xf6\x79\x8a\xd4\xd0\xd0" +
			"\x11\x01\x9d\x69\x77\xcd\x9e\x67\x21\x3b\x98\x1e\xcf\x0e\xf2\x91\x6f\xa8\x1c\x15\x30\xc3\x54\xa3" +
			"\xc1\xaa\x3a\x54\x4c\x4e\x5b\x61\x6a\x31\x50\x79\x1d\x2a\xa5\x20\x8d\x30\x95\x90\x07\x74\xa0\xf7" +
			"\xc6\xe3\x2b\xea\x38\x09\xf4\xde\x78\xbc\x0d\x1d\x8b\x61\x68\xa8\x43\x07\x39\x18\x3a\x9a\xc0\x29" +
			"\x21\x86\x8c\x36\x70\xac\x25\xac\xc2\x24\xa1\x83\x46\x61\x19\x46\x84\x8e\xc6\x30\x74\x84\xee\xcf" +
			"\x31\x64\x64\x81\x73\x42\x0c\x15\x32\x74\xdc\x89\x21\x23\x78\x40\x87\xa1\x43\x73\xea\x2a\x43\x4b" +
			"\xce\xa9\xab\x0c\x3d\x86\x51\x57\x19\x72\x0a\x46\x5d\x65\xa8\x29\xc3\x75\x95\x21\xa6\x0a\xd7\x55" +
			"\x86\x16\x1b\xac\xab\x0c\x29\x75\xb0\xae\x32\x94\xf8\x47\x76\x87\x8a\x68\x31\x9e\xe7\x1f\xbc\x4a" +
			"\x33\x50\x03\x78\xa5\x66\xa8\x0e\xe8\x6a\xcd\x50\x1d\x19\x65\x83\xa9\x43\x52\xe3\x11\x6e\xb6\x85" +
			"\xa2\xc6\x23\xdc\x67\x0b\x1d\x1a\x0f\x86\x86\x3c\x34\x1e\x0c\x1d\x26\x34\x1e\x0c\x1d\x45\x68\x3c" +
			"\x18\x3a\xe0\x6f\x14\x43\x95\x54\xb4\x15\xa6\x16\xf4\x6e\xbe\xbd\x7c\x63\xb4\x52\x2e\x83\x5e\xca" +
			"\x27\x18\xea\xaa\xce\x9e\xbb\x05\x39\xea\x8e\x0e\xc1\x95\x09\x1e\xd7\xcc\x60\x2a\x4b\x81\x47\x46" +
			"\x50\x29\x1d\x1b\x41\x66\x74\x74\x33\xf3\xfa\x91\xd1\x27\x25\x76\x2d\x02\x1f\x83\x52\x61\xf7\x21" +
			"\x08\x46\x53\x17\x14\x88\xfc\xe7\xd4\xcd\x04\x82\x33\x78\x5c\x44\x1e\x0b\x3c\x32\x82\x72\xf6\x0b" +
			"\xb6\x3a\x07\xf8\xab\x10\x32\xec\xd3\x86\x8e\x9b\x38\x63\x91\xa7\x4a\xb8\x6c\x1d\x3a\x67\x42\xb0" +
			"\x4d\xd8\xaf\xa3\xda\xa7\xdb\xb0\x67\x9c\xae\x5e\xf7\x07\xec\xcd\xef\x75\xf0\x43\xbe\x91\x85\x7b" +
			"\xae\xab\x12\x30\x8d\xf4\x3e\x9f\x4e\x71\xdf\x36\xec\x3b\xc3\x7d\xdb\xb0\xef\xc3\x3b\xba\xf7\xd1" +
			"\x73\x75\xff\x34\xff\xba\x89\xef\xe6\x8f\x3f\x17\xcb\x6f\xdd\x26\xde\x3c\xac\xe3\xcd\x5a\x64\xf1" +
			"\xe3\xfc\xee\x6e\xf1\xe3\x7b\xf7\xb4\xfe\x73\xb1\xe9\xd6\xae\x35\xf5\x6a\x2d\x33\xb2\xe7\xfa\x3d" +
			"\xd6\x74\x0c\x9f\xe5\xb6\xc2\x39\xb0\xfd\xe9\x7a\x32\x1d\x67\x52\x08\x91\xee\x62\xde\x25\xe0\xfc" +
			"\xf3\xbf\xae\x6e\x1b\x7b\x7a\x76\x3e\xb3\xd3\xf1\xec\xfa\xb2\xb4\xfb\x2a\xb5\x97\xb1\x7e\xfc\xb5" +
			"\xfe\xfe\xf0\x6b\xde\x3d\x6f\x75\x88\x34\xfe\xb6\x5a\x6f\xe2\x9e\x00\xe1\x9c\xe0\x06\x5d\x5c\x96" +
			"\x9f\x2e\xcb\xff\xc9\x7a\x4a\x58\x4f\x8d\x90\xf9\xcc\x5e\x4d\x67\x67\x97\x67\xd3\xf7\x58\xcf\xb0" +
			"\xe4\xa5\xb1\xad\xe0\x83\xf0\xd6\xee\xf2\x1a\x6f\x0b\x23\xf2\xd3\x12\x3e\x3f\x15\xbc\x26\x90\x17" +
			"\xc9\x4b\x89\xb1\x4e\x31\x3c\x5e\x6a\x0d\x35\x04\x5d\x23\x1e\x6c\xc4\xdf\x58\x25\x0c\x5c\x81\x06" +
			"\x2c\x3c\xcf\x19\xaa\x03\xda\x64\x1d\x6c\x04\xda\x69\x1d\x1c\x50\x8b\x3d\x3d\x75\x6c\x5b\xf8\xe9" +
			"\xa9\xf1\xfb\x10\xb5\x7f\x1f\x82\x77\x47\xd4\x48\x79\xa8\x55\xb5\x7f\x31\x82\x77\x4b\xd4\x37\x90" +
			"\xd1\x27\x86\x90\x9b\x27\x3d\x13\x12\x8f\x4f\x05\xad\x07\xe2\xc3\xea\x5d\x2d\xe2\xb6\x86\x93\xde" +
			"\x36\xfb\x57\xb6\xad\xd1\x9f\xb6\xcd\xce\xec\x5f\xf4\x1b\x6d\xda\xf6\x20\xa0\x75\x7e\x4f\xd0\xd7" +
			"\xd5\xd3\xe8\xe6\x69\xf1\x3c\xdf\x74\xa3\xcf\xeb\xee\xf0\xfb\x24\x0f\x17\x7f\xfe\x1b\x00\x00\xff" +
			"\xff",
		size: 22851,
		mode: 0664,
		time: time.Unix(1555990265, 0),
	},
	"git-version": &asset{
		name: "git-version",
		data: "" +
			"\x04\xc0\x57\x01\x80\x00\x08\x04\xd0\x7f\xdb\xc8\x71\x8c\x38\xb2\xfa\x47\xf0\x25\xc3\x17\xb1\xd6" +
			"\xfe\x12\xac\x53\xa2\xef\xa3\x09\x73\x07\x26\x98\x92\xd0\x7b\xfe\x00\x00\x00\xff\xff",
		size: 41,
		mode: 0664,
		time: time.Unix(1556686139, 733938676),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"git-version":          bintree{},
	"tls-parameters-4.csv": bintree{},
}
